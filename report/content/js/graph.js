/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 399.0, "minX": 0.0, "maxY": 21775.0, "series": [{"data": [[0.0, 1118.0], [0.1, 1118.0], [0.2, 1118.0], [0.3, 1118.0], [0.4, 1118.0], [0.5, 1191.0], [0.6, 1191.0], [0.7, 1191.0], [0.8, 1191.0], [0.9, 1191.0], [1.0, 1214.0], [1.1, 1214.0], [1.2, 1214.0], [1.3, 1214.0], [1.4, 1214.0], [1.5, 1260.0], [1.6, 1260.0], [1.7, 1260.0], [1.8, 1260.0], [1.9, 1260.0], [2.0, 1267.0], [2.1, 1267.0], [2.2, 1267.0], [2.3, 1267.0], [2.4, 1267.0], [2.5, 1306.0], [2.6, 1306.0], [2.7, 1306.0], [2.8, 1306.0], [2.9, 1306.0], [3.0, 1383.0], [3.1, 1383.0], [3.2, 1383.0], [3.3, 1383.0], [3.4, 1383.0], [3.5, 1403.0], [3.6, 1403.0], [3.7, 1403.0], [3.8, 1403.0], [3.9, 1403.0], [4.0, 1403.0], [4.1, 1403.0], [4.2, 1403.0], [4.3, 1403.0], [4.4, 1403.0], [4.5, 1439.0], [4.6, 1439.0], [4.7, 1439.0], [4.8, 1439.0], [4.9, 1439.0], [5.0, 1466.0], [5.1, 1466.0], [5.2, 1466.0], [5.3, 1466.0], [5.4, 1466.0], [5.5, 1490.0], [5.6, 1490.0], [5.7, 1490.0], [5.8, 1490.0], [5.9, 1490.0], [6.0, 1492.0], [6.1, 1492.0], [6.2, 1492.0], [6.3, 1492.0], [6.4, 1492.0], [6.5, 1528.0], [6.6, 1528.0], [6.7, 1528.0], [6.8, 1528.0], [6.9, 1528.0], [7.0, 1566.0], [7.1, 1566.0], [7.2, 1566.0], [7.3, 1566.0], [7.4, 1566.0], [7.5, 1591.0], [7.6, 1591.0], [7.7, 1591.0], [7.8, 1591.0], [7.9, 1591.0], [8.0, 1604.0], [8.1, 1604.0], [8.2, 1604.0], [8.3, 1604.0], [8.4, 1604.0], [8.5, 1661.0], [8.6, 1661.0], [8.7, 1661.0], [8.8, 1661.0], [8.9, 1661.0], [9.0, 1662.0], [9.1, 1662.0], [9.2, 1662.0], [9.3, 1662.0], [9.4, 1662.0], [9.5, 1668.0], [9.6, 1668.0], [9.7, 1668.0], [9.8, 1668.0], [9.9, 1668.0], [10.0, 1676.0], [10.1, 1676.0], [10.2, 1676.0], [10.3, 1676.0], [10.4, 1676.0], [10.5, 1683.0], [10.6, 1683.0], [10.7, 1683.0], [10.8, 1683.0], [10.9, 1683.0], [11.0, 1685.0], [11.1, 1685.0], [11.2, 1685.0], [11.3, 1685.0], [11.4, 1685.0], [11.5, 1709.0], [11.6, 1709.0], [11.7, 1709.0], [11.8, 1709.0], [11.9, 1709.0], [12.0, 1746.0], [12.1, 1746.0], [12.2, 1746.0], [12.3, 1746.0], [12.4, 1746.0], [12.5, 1752.0], [12.6, 1752.0], [12.7, 1752.0], [12.8, 1752.0], [12.9, 1752.0], [13.0, 1766.0], [13.1, 1766.0], [13.2, 1766.0], [13.3, 1766.0], [13.4, 1766.0], [13.5, 1781.0], [13.6, 1781.0], [13.7, 1781.0], [13.8, 1781.0], [13.9, 1781.0], [14.0, 1796.0], [14.1, 1796.0], [14.2, 1796.0], [14.3, 1796.0], [14.4, 1796.0], [14.5, 1799.0], [14.6, 1799.0], [14.7, 1799.0], [14.8, 1799.0], [14.9, 1799.0], [15.0, 1823.0], [15.1, 1823.0], [15.2, 1823.0], [15.3, 1823.0], [15.4, 1823.0], [15.5, 1829.0], [15.6, 1829.0], [15.7, 1829.0], [15.8, 1829.0], [15.9, 1829.0], [16.0, 1898.0], [16.1, 1898.0], [16.2, 1898.0], [16.3, 1898.0], [16.4, 1898.0], [16.5, 1899.0], [16.6, 1899.0], [16.7, 1899.0], [16.8, 1899.0], [16.9, 1899.0], [17.0, 1919.0], [17.1, 1919.0], [17.2, 1919.0], [17.3, 1919.0], [17.4, 1919.0], [17.5, 1939.0], [17.6, 1939.0], [17.7, 1939.0], [17.8, 1939.0], [17.9, 1939.0], [18.0, 1989.0], [18.1, 1989.0], [18.2, 1989.0], [18.3, 1989.0], [18.4, 1989.0], [18.5, 1990.0], [18.6, 1990.0], [18.7, 1990.0], [18.8, 1990.0], [18.9, 1990.0], [19.0, 2013.0], [19.1, 2013.0], [19.2, 2013.0], [19.3, 2013.0], [19.4, 2013.0], [19.5, 2029.0], [19.6, 2029.0], [19.7, 2029.0], [19.8, 2029.0], [19.9, 2029.0], [20.0, 2041.0], [20.1, 2041.0], [20.2, 2041.0], [20.3, 2041.0], [20.4, 2041.0], [20.5, 2113.0], [20.6, 2113.0], [20.7, 2113.0], [20.8, 2113.0], [20.9, 2113.0], [21.0, 2126.0], [21.1, 2126.0], [21.2, 2126.0], [21.3, 2126.0], [21.4, 2126.0], [21.5, 2155.0], [21.6, 2155.0], [21.7, 2155.0], [21.8, 2155.0], [21.9, 2155.0], [22.0, 2186.0], [22.1, 2186.0], [22.2, 2186.0], [22.3, 2186.0], [22.4, 2186.0], [22.5, 2191.0], [22.6, 2191.0], [22.7, 2191.0], [22.8, 2191.0], [22.9, 2191.0], [23.0, 2191.0], [23.1, 2191.0], [23.2, 2191.0], [23.3, 2191.0], [23.4, 2191.0], [23.5, 2195.0], [23.6, 2195.0], [23.7, 2195.0], [23.8, 2195.0], [23.9, 2195.0], [24.0, 2223.0], [24.1, 2223.0], [24.2, 2223.0], [24.3, 2223.0], [24.4, 2223.0], [24.5, 2272.0], [24.6, 2272.0], [24.7, 2272.0], [24.8, 2272.0], [24.9, 2272.0], [25.0, 2288.0], [25.1, 2288.0], [25.2, 2288.0], [25.3, 2288.0], [25.4, 2288.0], [25.5, 2301.0], [25.6, 2301.0], [25.7, 2301.0], [25.8, 2301.0], [25.9, 2301.0], [26.0, 2394.0], [26.1, 2394.0], [26.2, 2394.0], [26.3, 2394.0], [26.4, 2394.0], [26.5, 2418.0], [26.6, 2418.0], [26.7, 2418.0], [26.8, 2418.0], [26.9, 2418.0], [27.0, 2439.0], [27.1, 2439.0], [27.2, 2439.0], [27.3, 2439.0], [27.4, 2439.0], [27.5, 2476.0], [27.6, 2476.0], [27.7, 2476.0], [27.8, 2476.0], [27.9, 2476.0], [28.0, 2493.0], [28.1, 2493.0], [28.2, 2493.0], [28.3, 2493.0], [28.4, 2493.0], [28.5, 2546.0], [28.6, 2546.0], [28.7, 2546.0], [28.8, 2546.0], [28.9, 2546.0], [29.0, 2553.0], [29.1, 2553.0], [29.2, 2553.0], [29.3, 2553.0], [29.4, 2553.0], [29.5, 2575.0], [29.6, 2575.0], [29.7, 2575.0], [29.8, 2575.0], [29.9, 2575.0], [30.0, 2586.0], [30.1, 2586.0], [30.2, 2586.0], [30.3, 2586.0], [30.4, 2586.0], [30.5, 2680.0], [30.6, 2680.0], [30.7, 2680.0], [30.8, 2680.0], [30.9, 2680.0], [31.0, 2684.0], [31.1, 2684.0], [31.2, 2684.0], [31.3, 2684.0], [31.4, 2684.0], [31.5, 2701.0], [31.6, 2701.0], [31.7, 2701.0], [31.8, 2701.0], [31.9, 2701.0], [32.0, 2708.0], [32.1, 2708.0], [32.2, 2708.0], [32.3, 2708.0], [32.4, 2708.0], [32.5, 2721.0], [32.6, 2721.0], [32.7, 2721.0], [32.8, 2721.0], [32.9, 2721.0], [33.0, 2739.0], [33.1, 2739.0], [33.2, 2739.0], [33.3, 2739.0], [33.4, 2739.0], [33.5, 2753.0], [33.6, 2753.0], [33.7, 2753.0], [33.8, 2753.0], [33.9, 2753.0], [34.0, 2754.0], [34.1, 2754.0], [34.2, 2754.0], [34.3, 2754.0], [34.4, 2754.0], [34.5, 2980.0], [34.6, 2980.0], [34.7, 2980.0], [34.8, 2980.0], [34.9, 2980.0], [35.0, 2983.0], [35.1, 2983.0], [35.2, 2983.0], [35.3, 2983.0], [35.4, 2983.0], [35.5, 2986.0], [35.6, 2986.0], [35.7, 2986.0], [35.8, 2986.0], [35.9, 2986.0], [36.0, 3002.0], [36.1, 3002.0], [36.2, 3002.0], [36.3, 3002.0], [36.4, 3002.0], [36.5, 3027.0], [36.6, 3027.0], [36.7, 3027.0], [36.8, 3027.0], [36.9, 3027.0], [37.0, 3033.0], [37.1, 3033.0], [37.2, 3033.0], [37.3, 3033.0], [37.4, 3033.0], [37.5, 3049.0], [37.6, 3049.0], [37.7, 3049.0], [37.8, 3049.0], [37.9, 3049.0], [38.0, 3069.0], [38.1, 3069.0], [38.2, 3069.0], [38.3, 3069.0], [38.4, 3069.0], [38.5, 3072.0], [38.6, 3072.0], [38.7, 3072.0], [38.8, 3072.0], [38.9, 3072.0], [39.0, 3078.0], [39.1, 3078.0], [39.2, 3078.0], [39.3, 3078.0], [39.4, 3078.0], [39.5, 3228.0], [39.6, 3228.0], [39.7, 3228.0], [39.8, 3228.0], [39.9, 3228.0], [40.0, 3234.0], [40.1, 3234.0], [40.2, 3234.0], [40.3, 3234.0], [40.4, 3234.0], [40.5, 3240.0], [40.6, 3240.0], [40.7, 3240.0], [40.8, 3240.0], [40.9, 3240.0], [41.0, 3291.0], [41.1, 3291.0], [41.2, 3291.0], [41.3, 3291.0], [41.4, 3291.0], [41.5, 3373.0], [41.6, 3373.0], [41.7, 3373.0], [41.8, 3373.0], [41.9, 3373.0], [42.0, 3381.0], [42.1, 3381.0], [42.2, 3381.0], [42.3, 3381.0], [42.4, 3381.0], [42.5, 3425.0], [42.6, 3425.0], [42.7, 3425.0], [42.8, 3425.0], [42.9, 3425.0], [43.0, 3516.0], [43.1, 3516.0], [43.2, 3516.0], [43.3, 3516.0], [43.4, 3516.0], [43.5, 3592.0], [43.6, 3592.0], [43.7, 3592.0], [43.8, 3592.0], [43.9, 3592.0], [44.0, 3648.0], [44.1, 3648.0], [44.2, 3648.0], [44.3, 3648.0], [44.4, 3648.0], [44.5, 3669.0], [44.6, 3669.0], [44.7, 3669.0], [44.8, 3669.0], [44.9, 3669.0], [45.0, 3712.0], [45.1, 3712.0], [45.2, 3712.0], [45.3, 3712.0], [45.4, 3712.0], [45.5, 3726.0], [45.6, 3726.0], [45.7, 3726.0], [45.8, 3726.0], [45.9, 3726.0], [46.0, 3765.0], [46.1, 3765.0], [46.2, 3765.0], [46.3, 3765.0], [46.4, 3765.0], [46.5, 3770.0], [46.6, 3770.0], [46.7, 3770.0], [46.8, 3770.0], [46.9, 3770.0], [47.0, 3778.0], [47.1, 3778.0], [47.2, 3778.0], [47.3, 3778.0], [47.4, 3778.0], [47.5, 3913.0], [47.6, 3913.0], [47.7, 3913.0], [47.8, 3913.0], [47.9, 3913.0], [48.0, 3918.0], [48.1, 3918.0], [48.2, 3918.0], [48.3, 3918.0], [48.4, 3918.0], [48.5, 3945.0], [48.6, 3945.0], [48.7, 3945.0], [48.8, 3945.0], [48.9, 3945.0], [49.0, 3984.0], [49.1, 3984.0], [49.2, 3984.0], [49.3, 3984.0], [49.4, 3984.0], [49.5, 4065.0], [49.6, 4065.0], [49.7, 4065.0], [49.8, 4065.0], [49.9, 4065.0], [50.0, 4107.0], [50.1, 4107.0], [50.2, 4107.0], [50.3, 4107.0], [50.4, 4107.0], [50.5, 4230.0], [50.6, 4230.0], [50.7, 4230.0], [50.8, 4230.0], [50.9, 4230.0], [51.0, 4235.0], [51.1, 4235.0], [51.2, 4235.0], [51.3, 4235.0], [51.4, 4235.0], [51.5, 4339.0], [51.6, 4339.0], [51.7, 4339.0], [51.8, 4339.0], [51.9, 4339.0], [52.0, 4402.0], [52.1, 4402.0], [52.2, 4402.0], [52.3, 4402.0], [52.4, 4402.0], [52.5, 4474.0], [52.6, 4474.0], [52.7, 4474.0], [52.8, 4474.0], [52.9, 4474.0], [53.0, 4482.0], [53.1, 4482.0], [53.2, 4482.0], [53.3, 4482.0], [53.4, 4482.0], [53.5, 4537.0], [53.6, 4537.0], [53.7, 4537.0], [53.8, 4537.0], [53.9, 4537.0], [54.0, 4578.0], [54.1, 4578.0], [54.2, 4578.0], [54.3, 4578.0], [54.4, 4578.0], [54.5, 4579.0], [54.6, 4579.0], [54.7, 4579.0], [54.8, 4579.0], [54.9, 4579.0], [55.0, 4579.0], [55.1, 4579.0], [55.2, 4579.0], [55.3, 4579.0], [55.4, 4579.0], [55.5, 4720.0], [55.6, 4720.0], [55.7, 4720.0], [55.8, 4720.0], [55.9, 4720.0], [56.0, 4725.0], [56.1, 4725.0], [56.2, 4725.0], [56.3, 4725.0], [56.4, 4725.0], [56.5, 4783.0], [56.6, 4783.0], [56.7, 4783.0], [56.8, 4783.0], [56.9, 4783.0], [57.0, 4903.0], [57.1, 4903.0], [57.2, 4903.0], [57.3, 4903.0], [57.4, 4903.0], [57.5, 4938.0], [57.6, 4938.0], [57.7, 4938.0], [57.8, 4938.0], [57.9, 4938.0], [58.0, 4985.0], [58.1, 4985.0], [58.2, 4985.0], [58.3, 4985.0], [58.4, 4985.0], [58.5, 5100.0], [58.6, 5100.0], [58.7, 5100.0], [58.8, 5100.0], [58.9, 5100.0], [59.0, 5155.0], [59.1, 5155.0], [59.2, 5155.0], [59.3, 5155.0], [59.4, 5155.0], [59.5, 5158.0], [59.6, 5158.0], [59.7, 5158.0], [59.8, 5158.0], [59.9, 5158.0], [60.0, 5277.0], [60.1, 5277.0], [60.2, 5277.0], [60.3, 5277.0], [60.4, 5277.0], [60.5, 5289.0], [60.6, 5289.0], [60.7, 5289.0], [60.8, 5289.0], [60.9, 5289.0], [61.0, 5313.0], [61.1, 5313.0], [61.2, 5313.0], [61.3, 5313.0], [61.4, 5313.0], [61.5, 5334.0], [61.6, 5334.0], [61.7, 5334.0], [61.8, 5334.0], [61.9, 5334.0], [62.0, 5355.0], [62.1, 5355.0], [62.2, 5355.0], [62.3, 5355.0], [62.4, 5355.0], [62.5, 5393.0], [62.6, 5393.0], [62.7, 5393.0], [62.8, 5393.0], [62.9, 5393.0], [63.0, 5420.0], [63.1, 5420.0], [63.2, 5420.0], [63.3, 5420.0], [63.4, 5420.0], [63.5, 5449.0], [63.6, 5449.0], [63.7, 5449.0], [63.8, 5449.0], [63.9, 5449.0], [64.0, 5486.0], [64.1, 5486.0], [64.2, 5486.0], [64.3, 5486.0], [64.4, 5486.0], [64.5, 5503.0], [64.6, 5503.0], [64.7, 5503.0], [64.8, 5503.0], [64.9, 5503.0], [65.0, 5531.0], [65.1, 5531.0], [65.2, 5531.0], [65.3, 5531.0], [65.4, 5531.0], [65.5, 5554.0], [65.6, 5554.0], [65.7, 5554.0], [65.8, 5554.0], [65.9, 5554.0], [66.0, 5629.0], [66.1, 5629.0], [66.2, 5629.0], [66.3, 5629.0], [66.4, 5629.0], [66.5, 5846.0], [66.6, 5846.0], [66.7, 5846.0], [66.8, 5846.0], [66.9, 5846.0], [67.0, 5937.0], [67.1, 5937.0], [67.2, 5937.0], [67.3, 5937.0], [67.4, 5937.0], [67.5, 6017.0], [67.6, 6017.0], [67.7, 6017.0], [67.8, 6017.0], [67.9, 6017.0], [68.0, 6072.0], [68.1, 6072.0], [68.2, 6072.0], [68.3, 6072.0], [68.4, 6072.0], [68.5, 6148.0], [68.6, 6148.0], [68.7, 6148.0], [68.8, 6148.0], [68.9, 6148.0], [69.0, 6163.0], [69.1, 6163.0], [69.2, 6163.0], [69.3, 6163.0], [69.4, 6163.0], [69.5, 6173.0], [69.6, 6173.0], [69.7, 6173.0], [69.8, 6173.0], [69.9, 6173.0], [70.0, 6339.0], [70.1, 6339.0], [70.2, 6339.0], [70.3, 6339.0], [70.4, 6339.0], [70.5, 6391.0], [70.6, 6391.0], [70.7, 6391.0], [70.8, 6391.0], [70.9, 6391.0], [71.0, 6443.0], [71.1, 6443.0], [71.2, 6443.0], [71.3, 6443.0], [71.4, 6443.0], [71.5, 6695.0], [71.6, 6695.0], [71.7, 6695.0], [71.8, 6695.0], [71.9, 6695.0], [72.0, 6710.0], [72.1, 6710.0], [72.2, 6710.0], [72.3, 6710.0], [72.4, 6710.0], [72.5, 6778.0], [72.6, 6778.0], [72.7, 6778.0], [72.8, 6778.0], [72.9, 6778.0], [73.0, 6808.0], [73.1, 6808.0], [73.2, 6808.0], [73.3, 6808.0], [73.4, 6808.0], [73.5, 6846.0], [73.6, 6846.0], [73.7, 6846.0], [73.8, 6846.0], [73.9, 6846.0], [74.0, 6864.0], [74.1, 6864.0], [74.2, 6864.0], [74.3, 6864.0], [74.4, 6864.0], [74.5, 6888.0], [74.6, 6888.0], [74.7, 6888.0], [74.8, 6888.0], [74.9, 6888.0], [75.0, 7169.0], [75.1, 7169.0], [75.2, 7169.0], [75.3, 7169.0], [75.4, 7169.0], [75.5, 7211.0], [75.6, 7211.0], [75.7, 7211.0], [75.8, 7211.0], [75.9, 7211.0], [76.0, 7292.0], [76.1, 7292.0], [76.2, 7292.0], [76.3, 7292.0], [76.4, 7292.0], [76.5, 7332.0], [76.6, 7332.0], [76.7, 7332.0], [76.8, 7332.0], [76.9, 7332.0], [77.0, 7340.0], [77.1, 7340.0], [77.2, 7340.0], [77.3, 7340.0], [77.4, 7340.0], [77.5, 7351.0], [77.6, 7351.0], [77.7, 7351.0], [77.8, 7351.0], [77.9, 7351.0], [78.0, 7371.0], [78.1, 7371.0], [78.2, 7371.0], [78.3, 7371.0], [78.4, 7371.0], [78.5, 7394.0], [78.6, 7394.0], [78.7, 7394.0], [78.8, 7394.0], [78.9, 7394.0], [79.0, 7431.0], [79.1, 7431.0], [79.2, 7431.0], [79.3, 7431.0], [79.4, 7431.0], [79.5, 7434.0], [79.6, 7434.0], [79.7, 7434.0], [79.8, 7434.0], [79.9, 7434.0], [80.0, 7481.0], [80.1, 7481.0], [80.2, 7481.0], [80.3, 7481.0], [80.4, 7481.0], [80.5, 7518.0], [80.6, 7518.0], [80.7, 7518.0], [80.8, 7518.0], [80.9, 7518.0], [81.0, 7628.0], [81.1, 7628.0], [81.2, 7628.0], [81.3, 7628.0], [81.4, 7628.0], [81.5, 7642.0], [81.6, 7642.0], [81.7, 7642.0], [81.8, 7642.0], [81.9, 7642.0], [82.0, 7710.0], [82.1, 7710.0], [82.2, 7710.0], [82.3, 7710.0], [82.4, 7710.0], [82.5, 7716.0], [82.6, 7716.0], [82.7, 7716.0], [82.8, 7716.0], [82.9, 7716.0], [83.0, 7717.0], [83.1, 7717.0], [83.2, 7717.0], [83.3, 7717.0], [83.4, 7717.0], [83.5, 7751.0], [83.6, 7751.0], [83.7, 7751.0], [83.8, 7751.0], [83.9, 7751.0], [84.0, 7756.0], [84.1, 7756.0], [84.2, 7756.0], [84.3, 7756.0], [84.4, 7756.0], [84.5, 7857.0], [84.6, 7857.0], [84.7, 7857.0], [84.8, 7857.0], [84.9, 7857.0], [85.0, 7871.0], [85.1, 7871.0], [85.2, 7871.0], [85.3, 7871.0], [85.4, 7871.0], [85.5, 7947.0], [85.6, 7947.0], [85.7, 7947.0], [85.8, 7947.0], [85.9, 7947.0], [86.0, 7975.0], [86.1, 7975.0], [86.2, 7975.0], [86.3, 7975.0], [86.4, 7975.0], [86.5, 7975.0], [86.6, 7975.0], [86.7, 7975.0], [86.8, 7975.0], [86.9, 7975.0], [87.0, 8085.0], [87.1, 8085.0], [87.2, 8085.0], [87.3, 8085.0], [87.4, 8085.0], [87.5, 8215.0], [87.6, 8215.0], [87.7, 8215.0], [87.8, 8215.0], [87.9, 8215.0], [88.0, 8396.0], [88.1, 8396.0], [88.2, 8396.0], [88.3, 8396.0], [88.4, 8396.0], [88.5, 8494.0], [88.6, 8494.0], [88.7, 8494.0], [88.8, 8494.0], [88.9, 8494.0], [89.0, 8680.0], [89.1, 8680.0], [89.2, 8680.0], [89.3, 8680.0], [89.4, 8680.0], [89.5, 8747.0], [89.6, 8747.0], [89.7, 8747.0], [89.8, 8747.0], [89.9, 8747.0], [90.0, 8866.0], [90.1, 8866.0], [90.2, 8866.0], [90.3, 8866.0], [90.4, 8866.0], [90.5, 8928.0], [90.6, 8928.0], [90.7, 8928.0], [90.8, 8928.0], [90.9, 8928.0], [91.0, 9011.0], [91.1, 9011.0], [91.2, 9011.0], [91.3, 9011.0], [91.4, 9011.0], [91.5, 9213.0], [91.6, 9213.0], [91.7, 9213.0], [91.8, 9213.0], [91.9, 9213.0], [92.0, 9228.0], [92.1, 9228.0], [92.2, 9228.0], [92.3, 9228.0], [92.4, 9228.0], [92.5, 9297.0], [92.6, 9297.0], [92.7, 9297.0], [92.8, 9297.0], [92.9, 9297.0], [93.0, 9326.0], [93.1, 9326.0], [93.2, 9326.0], [93.3, 9326.0], [93.4, 9326.0], [93.5, 9337.0], [93.6, 9337.0], [93.7, 9337.0], [93.8, 9337.0], [93.9, 9337.0], [94.0, 9495.0], [94.1, 9495.0], [94.2, 9495.0], [94.3, 9495.0], [94.4, 9495.0], [94.5, 9503.0], [94.6, 9503.0], [94.7, 9503.0], [94.8, 9503.0], [94.9, 9503.0], [95.0, 9656.0], [95.1, 9656.0], [95.2, 9656.0], [95.3, 9656.0], [95.4, 9656.0], [95.5, 10542.0], [95.6, 10542.0], [95.7, 10542.0], [95.8, 10542.0], [95.9, 10542.0], [96.0, 11179.0], [96.1, 11179.0], [96.2, 11179.0], [96.3, 11179.0], [96.4, 11179.0], [96.5, 11699.0], [96.6, 11699.0], [96.7, 11699.0], [96.8, 11699.0], [96.9, 11699.0], [97.0, 12129.0], [97.1, 12129.0], [97.2, 12129.0], [97.3, 12129.0], [97.4, 12129.0], [97.5, 12895.0], [97.6, 12895.0], [97.7, 12895.0], [97.8, 12895.0], [97.9, 12895.0], [98.0, 14445.0], [98.1, 14445.0], [98.2, 14445.0], [98.3, 14445.0], [98.4, 14445.0], [98.5, 21341.0], [98.6, 21341.0], [98.7, 21341.0], [98.8, 21341.0], [98.9, 21341.0], [99.0, 21349.0], [99.1, 21349.0], [99.2, 21349.0], [99.3, 21349.0], [99.4, 21349.0], [99.5, 21775.0], [99.6, 21775.0], [99.7, 21775.0], [99.8, 21775.0], [99.9, 21775.0]], "isOverall": false, "label": "Homepage", "isController": false}, {"data": [[0.0, 597.0], [0.1, 597.0], [0.2, 597.0], [0.3, 597.0], [0.4, 597.0], [0.5, 697.0], [0.6, 697.0], [0.7, 697.0], [0.8, 697.0], [0.9, 697.0], [1.0, 715.0], [1.1, 715.0], [1.2, 715.0], [1.3, 715.0], [1.4, 715.0], [1.5, 718.0], [1.6, 718.0], [1.7, 718.0], [1.8, 718.0], [1.9, 718.0], [2.0, 753.0], [2.1, 753.0], [2.2, 753.0], [2.3, 753.0], [2.4, 753.0], [2.5, 754.0], [2.6, 754.0], [2.7, 754.0], [2.8, 754.0], [2.9, 754.0], [3.0, 775.0], [3.1, 775.0], [3.2, 775.0], [3.3, 775.0], [3.4, 775.0], [3.5, 781.0], [3.6, 781.0], [3.7, 781.0], [3.8, 781.0], [3.9, 781.0], [4.0, 807.0], [4.1, 807.0], [4.2, 807.0], [4.3, 807.0], [4.4, 807.0], [4.5, 848.0], [4.6, 848.0], [4.7, 848.0], [4.8, 848.0], [4.9, 848.0], [5.0, 903.0], [5.1, 903.0], [5.2, 903.0], [5.3, 903.0], [5.4, 903.0], [5.5, 926.0], [5.6, 926.0], [5.7, 926.0], [5.8, 926.0], [5.9, 926.0], [6.0, 935.0], [6.1, 935.0], [6.2, 935.0], [6.3, 935.0], [6.4, 935.0], [6.5, 936.0], [6.6, 936.0], [6.7, 936.0], [6.8, 936.0], [6.9, 936.0], [7.0, 950.0], [7.1, 950.0], [7.2, 950.0], [7.3, 950.0], [7.4, 950.0], [7.5, 961.0], [7.6, 961.0], [7.7, 961.0], [7.8, 961.0], [7.9, 961.0], [8.0, 966.0], [8.1, 966.0], [8.2, 966.0], [8.3, 966.0], [8.4, 966.0], [8.5, 989.0], [8.6, 989.0], [8.7, 989.0], [8.8, 989.0], [8.9, 989.0], [9.0, 998.0], [9.1, 998.0], [9.2, 998.0], [9.3, 998.0], [9.4, 998.0], [9.5, 1004.0], [9.6, 1004.0], [9.7, 1004.0], [9.8, 1004.0], [9.9, 1004.0], [10.0, 1008.0], [10.1, 1008.0], [10.2, 1008.0], [10.3, 1008.0], [10.4, 1008.0], [10.5, 1027.0], [10.6, 1027.0], [10.7, 1027.0], [10.8, 1027.0], [10.9, 1027.0], [11.0, 1045.0], [11.1, 1045.0], [11.2, 1045.0], [11.3, 1045.0], [11.4, 1045.0], [11.5, 1098.0], [11.6, 1098.0], [11.7, 1098.0], [11.8, 1098.0], [11.9, 1098.0], [12.0, 1103.0], [12.1, 1103.0], [12.2, 1103.0], [12.3, 1103.0], [12.4, 1103.0], [12.5, 1125.0], [12.6, 1125.0], [12.7, 1125.0], [12.8, 1125.0], [12.9, 1125.0], [13.0, 1136.0], [13.1, 1136.0], [13.2, 1136.0], [13.3, 1136.0], [13.4, 1136.0], [13.5, 1199.0], [13.6, 1199.0], [13.7, 1199.0], [13.8, 1199.0], [13.9, 1199.0], [14.0, 1207.0], [14.1, 1207.0], [14.2, 1207.0], [14.3, 1207.0], [14.4, 1207.0], [14.5, 1212.0], [14.6, 1212.0], [14.7, 1212.0], [14.8, 1212.0], [14.9, 1212.0], [15.0, 1215.0], [15.1, 1215.0], [15.2, 1215.0], [15.3, 1215.0], [15.4, 1215.0], [15.5, 1217.0], [15.6, 1217.0], [15.7, 1217.0], [15.8, 1217.0], [15.9, 1217.0], [16.0, 1218.0], [16.1, 1218.0], [16.2, 1218.0], [16.3, 1218.0], [16.4, 1218.0], [16.5, 1218.0], [16.6, 1218.0], [16.7, 1218.0], [16.8, 1218.0], [16.9, 1218.0], [17.0, 1223.0], [17.1, 1223.0], [17.2, 1223.0], [17.3, 1223.0], [17.4, 1223.0], [17.5, 1243.0], [17.6, 1243.0], [17.7, 1243.0], [17.8, 1243.0], [17.9, 1243.0], [18.0, 1270.0], [18.1, 1270.0], [18.2, 1270.0], [18.3, 1270.0], [18.4, 1270.0], [18.5, 1296.0], [18.6, 1296.0], [18.7, 1296.0], [18.8, 1296.0], [18.9, 1296.0], [19.0, 1322.0], [19.1, 1322.0], [19.2, 1322.0], [19.3, 1322.0], [19.4, 1322.0], [19.5, 1327.0], [19.6, 1327.0], [19.7, 1327.0], [19.8, 1327.0], [19.9, 1327.0], [20.0, 1332.0], [20.1, 1332.0], [20.2, 1332.0], [20.3, 1332.0], [20.4, 1332.0], [20.5, 1342.0], [20.6, 1342.0], [20.7, 1342.0], [20.8, 1342.0], [20.9, 1342.0], [21.0, 1370.0], [21.1, 1370.0], [21.2, 1370.0], [21.3, 1370.0], [21.4, 1370.0], [21.5, 1389.0], [21.6, 1389.0], [21.7, 1389.0], [21.8, 1389.0], [21.9, 1389.0], [22.0, 1390.0], [22.1, 1390.0], [22.2, 1390.0], [22.3, 1390.0], [22.4, 1390.0], [22.5, 1414.0], [22.6, 1414.0], [22.7, 1414.0], [22.8, 1414.0], [22.9, 1414.0], [23.0, 1435.0], [23.1, 1435.0], [23.2, 1435.0], [23.3, 1435.0], [23.4, 1435.0], [23.5, 1538.0], [23.6, 1538.0], [23.7, 1538.0], [23.8, 1538.0], [23.9, 1538.0], [24.0, 1573.0], [24.1, 1573.0], [24.2, 1573.0], [24.3, 1573.0], [24.4, 1573.0], [24.5, 1575.0], [24.6, 1575.0], [24.7, 1575.0], [24.8, 1575.0], [24.9, 1575.0], [25.0, 1589.0], [25.1, 1589.0], [25.2, 1589.0], [25.3, 1589.0], [25.4, 1589.0], [25.5, 1623.0], [25.6, 1623.0], [25.7, 1623.0], [25.8, 1623.0], [25.9, 1623.0], [26.0, 1643.0], [26.1, 1643.0], [26.2, 1643.0], [26.3, 1643.0], [26.4, 1643.0], [26.5, 1718.0], [26.6, 1718.0], [26.7, 1718.0], [26.8, 1718.0], [26.9, 1718.0], [27.0, 1728.0], [27.1, 1728.0], [27.2, 1728.0], [27.3, 1728.0], [27.4, 1728.0], [27.5, 1732.0], [27.6, 1732.0], [27.7, 1732.0], [27.8, 1732.0], [27.9, 1732.0], [28.0, 1745.0], [28.1, 1745.0], [28.2, 1745.0], [28.3, 1745.0], [28.4, 1745.0], [28.5, 1748.0], [28.6, 1748.0], [28.7, 1748.0], [28.8, 1748.0], [28.9, 1748.0], [29.0, 1756.0], [29.1, 1756.0], [29.2, 1756.0], [29.3, 1756.0], [29.4, 1756.0], [29.5, 1766.0], [29.6, 1766.0], [29.7, 1766.0], [29.8, 1766.0], [29.9, 1766.0], [30.0, 1848.0], [30.1, 1848.0], [30.2, 1848.0], [30.3, 1848.0], [30.4, 1848.0], [30.5, 1855.0], [30.6, 1855.0], [30.7, 1855.0], [30.8, 1855.0], [30.9, 1855.0], [31.0, 1919.0], [31.1, 1919.0], [31.2, 1919.0], [31.3, 1919.0], [31.4, 1919.0], [31.5, 1992.0], [31.6, 1992.0], [31.7, 1992.0], [31.8, 1992.0], [31.9, 1992.0], [32.0, 2000.0], [32.1, 2000.0], [32.2, 2000.0], [32.3, 2000.0], [32.4, 2000.0], [32.5, 2078.0], [32.6, 2078.0], [32.7, 2078.0], [32.8, 2078.0], [32.9, 2078.0], [33.0, 2083.0], [33.1, 2083.0], [33.2, 2083.0], [33.3, 2083.0], [33.4, 2083.0], [33.5, 2099.0], [33.6, 2099.0], [33.7, 2099.0], [33.8, 2099.0], [33.9, 2099.0], [34.0, 2119.0], [34.1, 2119.0], [34.2, 2119.0], [34.3, 2119.0], [34.4, 2119.0], [34.5, 2139.0], [34.6, 2139.0], [34.7, 2139.0], [34.8, 2139.0], [34.9, 2139.0], [35.0, 2168.0], [35.1, 2168.0], [35.2, 2168.0], [35.3, 2168.0], [35.4, 2168.0], [35.5, 2213.0], [35.6, 2213.0], [35.7, 2213.0], [35.8, 2213.0], [35.9, 2213.0], [36.0, 2259.0], [36.1, 2259.0], [36.2, 2259.0], [36.3, 2259.0], [36.4, 2259.0], [36.5, 2288.0], [36.6, 2288.0], [36.7, 2288.0], [36.8, 2288.0], [36.9, 2288.0], [37.0, 2299.0], [37.1, 2299.0], [37.2, 2299.0], [37.3, 2299.0], [37.4, 2299.0], [37.5, 2502.0], [37.6, 2502.0], [37.7, 2502.0], [37.8, 2502.0], [37.9, 2502.0], [38.0, 2516.0], [38.1, 2516.0], [38.2, 2516.0], [38.3, 2516.0], [38.4, 2516.0], [38.5, 2530.0], [38.6, 2530.0], [38.7, 2530.0], [38.8, 2530.0], [38.9, 2530.0], [39.0, 2531.0], [39.1, 2531.0], [39.2, 2531.0], [39.3, 2531.0], [39.4, 2531.0], [39.5, 2540.0], [39.6, 2540.0], [39.7, 2540.0], [39.8, 2540.0], [39.9, 2540.0], [40.0, 2562.0], [40.1, 2562.0], [40.2, 2562.0], [40.3, 2562.0], [40.4, 2562.0], [40.5, 2593.0], [40.6, 2593.0], [40.7, 2593.0], [40.8, 2593.0], [40.9, 2593.0], [41.0, 2598.0], [41.1, 2598.0], [41.2, 2598.0], [41.3, 2598.0], [41.4, 2598.0], [41.5, 2603.0], [41.6, 2603.0], [41.7, 2603.0], [41.8, 2603.0], [41.9, 2603.0], [42.0, 2650.0], [42.1, 2650.0], [42.2, 2650.0], [42.3, 2650.0], [42.4, 2650.0], [42.5, 2656.0], [42.6, 2656.0], [42.7, 2656.0], [42.8, 2656.0], [42.9, 2656.0], [43.0, 2712.0], [43.1, 2712.0], [43.2, 2712.0], [43.3, 2712.0], [43.4, 2712.0], [43.5, 2743.0], [43.6, 2743.0], [43.7, 2743.0], [43.8, 2743.0], [43.9, 2743.0], [44.0, 2936.0], [44.1, 2936.0], [44.2, 2936.0], [44.3, 2936.0], [44.4, 2936.0], [44.5, 2958.0], [44.6, 2958.0], [44.7, 2958.0], [44.8, 2958.0], [44.9, 2958.0], [45.0, 3060.0], [45.1, 3060.0], [45.2, 3060.0], [45.3, 3060.0], [45.4, 3060.0], [45.5, 3076.0], [45.6, 3076.0], [45.7, 3076.0], [45.8, 3076.0], [45.9, 3076.0], [46.0, 3129.0], [46.1, 3129.0], [46.2, 3129.0], [46.3, 3129.0], [46.4, 3129.0], [46.5, 3164.0], [46.6, 3164.0], [46.7, 3164.0], [46.8, 3164.0], [46.9, 3164.0], [47.0, 3200.0], [47.1, 3200.0], [47.2, 3200.0], [47.3, 3200.0], [47.4, 3200.0], [47.5, 3264.0], [47.6, 3264.0], [47.7, 3264.0], [47.8, 3264.0], [47.9, 3264.0], [48.0, 3301.0], [48.1, 3301.0], [48.2, 3301.0], [48.3, 3301.0], [48.4, 3301.0], [48.5, 3320.0], [48.6, 3320.0], [48.7, 3320.0], [48.8, 3320.0], [48.9, 3320.0], [49.0, 3322.0], [49.1, 3322.0], [49.2, 3322.0], [49.3, 3322.0], [49.4, 3322.0], [49.5, 3352.0], [49.6, 3352.0], [49.7, 3352.0], [49.8, 3352.0], [49.9, 3352.0], [50.0, 3452.0], [50.1, 3452.0], [50.2, 3452.0], [50.3, 3452.0], [50.4, 3452.0], [50.5, 3515.0], [50.6, 3515.0], [50.7, 3515.0], [50.8, 3515.0], [50.9, 3515.0], [51.0, 3542.0], [51.1, 3542.0], [51.2, 3542.0], [51.3, 3542.0], [51.4, 3542.0], [51.5, 3620.0], [51.6, 3620.0], [51.7, 3620.0], [51.8, 3620.0], [51.9, 3620.0], [52.0, 3734.0], [52.1, 3734.0], [52.2, 3734.0], [52.3, 3734.0], [52.4, 3734.0], [52.5, 3779.0], [52.6, 3779.0], [52.7, 3779.0], [52.8, 3779.0], [52.9, 3779.0], [53.0, 3798.0], [53.1, 3798.0], [53.2, 3798.0], [53.3, 3798.0], [53.4, 3798.0], [53.5, 3815.0], [53.6, 3815.0], [53.7, 3815.0], [53.8, 3815.0], [53.9, 3815.0], [54.0, 4008.0], [54.1, 4008.0], [54.2, 4008.0], [54.3, 4008.0], [54.4, 4008.0], [54.5, 4009.0], [54.6, 4009.0], [54.7, 4009.0], [54.8, 4009.0], [54.9, 4009.0], [55.0, 4025.0], [55.1, 4025.0], [55.2, 4025.0], [55.3, 4025.0], [55.4, 4025.0], [55.5, 4041.0], [55.6, 4041.0], [55.7, 4041.0], [55.8, 4041.0], [55.9, 4041.0], [56.0, 4089.0], [56.1, 4089.0], [56.2, 4089.0], [56.3, 4089.0], [56.4, 4089.0], [56.5, 4128.0], [56.6, 4128.0], [56.7, 4128.0], [56.8, 4128.0], [56.9, 4128.0], [57.0, 4256.0], [57.1, 4256.0], [57.2, 4256.0], [57.3, 4256.0], [57.4, 4256.0], [57.5, 4277.0], [57.6, 4277.0], [57.7, 4277.0], [57.8, 4277.0], [57.9, 4277.0], [58.0, 4320.0], [58.1, 4320.0], [58.2, 4320.0], [58.3, 4320.0], [58.4, 4320.0], [58.5, 4432.0], [58.6, 4432.0], [58.7, 4432.0], [58.8, 4432.0], [58.9, 4432.0], [59.0, 4453.0], [59.1, 4453.0], [59.2, 4453.0], [59.3, 4453.0], [59.4, 4453.0], [59.5, 4485.0], [59.6, 4485.0], [59.7, 4485.0], [59.8, 4485.0], [59.9, 4485.0], [60.0, 4598.0], [60.1, 4598.0], [60.2, 4598.0], [60.3, 4598.0], [60.4, 4598.0], [60.5, 4632.0], [60.6, 4632.0], [60.7, 4632.0], [60.8, 4632.0], [60.9, 4632.0], [61.0, 4655.0], [61.1, 4655.0], [61.2, 4655.0], [61.3, 4655.0], [61.4, 4655.0], [61.5, 4676.0], [61.6, 4676.0], [61.7, 4676.0], [61.8, 4676.0], [61.9, 4676.0], [62.0, 4812.0], [62.1, 4812.0], [62.2, 4812.0], [62.3, 4812.0], [62.4, 4812.0], [62.5, 4814.0], [62.6, 4814.0], [62.7, 4814.0], [62.8, 4814.0], [62.9, 4814.0], [63.0, 4833.0], [63.1, 4833.0], [63.2, 4833.0], [63.3, 4833.0], [63.4, 4833.0], [63.5, 4866.0], [63.6, 4866.0], [63.7, 4866.0], [63.8, 4866.0], [63.9, 4866.0], [64.0, 4884.0], [64.1, 4884.0], [64.2, 4884.0], [64.3, 4884.0], [64.4, 4884.0], [64.5, 4913.0], [64.6, 4913.0], [64.7, 4913.0], [64.8, 4913.0], [64.9, 4913.0], [65.0, 4921.0], [65.1, 4921.0], [65.2, 4921.0], [65.3, 4921.0], [65.4, 4921.0], [65.5, 4950.0], [65.6, 4950.0], [65.7, 4950.0], [65.8, 4950.0], [65.9, 4950.0], [66.0, 4960.0], [66.1, 4960.0], [66.2, 4960.0], [66.3, 4960.0], [66.4, 4960.0], [66.5, 5041.0], [66.6, 5041.0], [66.7, 5041.0], [66.8, 5041.0], [66.9, 5041.0], [67.0, 5042.0], [67.1, 5042.0], [67.2, 5042.0], [67.3, 5042.0], [67.4, 5042.0], [67.5, 5091.0], [67.6, 5091.0], [67.7, 5091.0], [67.8, 5091.0], [67.9, 5091.0], [68.0, 5150.0], [68.1, 5150.0], [68.2, 5150.0], [68.3, 5150.0], [68.4, 5150.0], [68.5, 5471.0], [68.6, 5471.0], [68.7, 5471.0], [68.8, 5471.0], [68.9, 5471.0], [69.0, 5516.0], [69.1, 5516.0], [69.2, 5516.0], [69.3, 5516.0], [69.4, 5516.0], [69.5, 5674.0], [69.6, 5674.0], [69.7, 5674.0], [69.8, 5674.0], [69.9, 5674.0], [70.0, 5691.0], [70.1, 5691.0], [70.2, 5691.0], [70.3, 5691.0], [70.4, 5691.0], [70.5, 5694.0], [70.6, 5694.0], [70.7, 5694.0], [70.8, 5694.0], [70.9, 5694.0], [71.0, 5695.0], [71.1, 5695.0], [71.2, 5695.0], [71.3, 5695.0], [71.4, 5695.0], [71.5, 5709.0], [71.6, 5709.0], [71.7, 5709.0], [71.8, 5709.0], [71.9, 5709.0], [72.0, 5823.0], [72.1, 5823.0], [72.2, 5823.0], [72.3, 5823.0], [72.4, 5823.0], [72.5, 5862.0], [72.6, 5862.0], [72.7, 5862.0], [72.8, 5862.0], [72.9, 5862.0], [73.0, 5862.0], [73.1, 5862.0], [73.2, 5862.0], [73.3, 5862.0], [73.4, 5862.0], [73.5, 5908.0], [73.6, 5908.0], [73.7, 5908.0], [73.8, 5908.0], [73.9, 5908.0], [74.0, 5911.0], [74.1, 5911.0], [74.2, 5911.0], [74.3, 5911.0], [74.4, 5911.0], [74.5, 5966.0], [74.6, 5966.0], [74.7, 5966.0], [74.8, 5966.0], [74.9, 5966.0], [75.0, 5975.0], [75.1, 5975.0], [75.2, 5975.0], [75.3, 5975.0], [75.4, 5975.0], [75.5, 5985.0], [75.6, 5985.0], [75.7, 5985.0], [75.8, 5985.0], [75.9, 5985.0], [76.0, 6034.0], [76.1, 6034.0], [76.2, 6034.0], [76.3, 6034.0], [76.4, 6034.0], [76.5, 6042.0], [76.6, 6042.0], [76.7, 6042.0], [76.8, 6042.0], [76.9, 6042.0], [77.0, 6107.0], [77.1, 6107.0], [77.2, 6107.0], [77.3, 6107.0], [77.4, 6107.0], [77.5, 6352.0], [77.6, 6352.0], [77.7, 6352.0], [77.8, 6352.0], [77.9, 6352.0], [78.0, 6360.0], [78.1, 6360.0], [78.2, 6360.0], [78.3, 6360.0], [78.4, 6360.0], [78.5, 6386.0], [78.6, 6386.0], [78.7, 6386.0], [78.8, 6386.0], [78.9, 6386.0], [79.0, 6509.0], [79.1, 6509.0], [79.2, 6509.0], [79.3, 6509.0], [79.4, 6509.0], [79.5, 6587.0], [79.6, 6587.0], [79.7, 6587.0], [79.8, 6587.0], [79.9, 6587.0], [80.0, 6741.0], [80.1, 6741.0], [80.2, 6741.0], [80.3, 6741.0], [80.4, 6741.0], [80.5, 6823.0], [80.6, 6823.0], [80.7, 6823.0], [80.8, 6823.0], [80.9, 6823.0], [81.0, 6905.0], [81.1, 6905.0], [81.2, 6905.0], [81.3, 6905.0], [81.4, 6905.0], [81.5, 6926.0], [81.6, 6926.0], [81.7, 6926.0], [81.8, 6926.0], [81.9, 6926.0], [82.0, 6966.0], [82.1, 6966.0], [82.2, 6966.0], [82.3, 6966.0], [82.4, 6966.0], [82.5, 6971.0], [82.6, 6971.0], [82.7, 6971.0], [82.8, 6971.0], [82.9, 6971.0], [83.0, 7029.0], [83.1, 7029.0], [83.2, 7029.0], [83.3, 7029.0], [83.4, 7029.0], [83.5, 7156.0], [83.6, 7156.0], [83.7, 7156.0], [83.8, 7156.0], [83.9, 7156.0], [84.0, 7176.0], [84.1, 7176.0], [84.2, 7176.0], [84.3, 7176.0], [84.4, 7176.0], [84.5, 7241.0], [84.6, 7241.0], [84.7, 7241.0], [84.8, 7241.0], [84.9, 7241.0], [85.0, 7242.0], [85.1, 7242.0], [85.2, 7242.0], [85.3, 7242.0], [85.4, 7242.0], [85.5, 7255.0], [85.6, 7255.0], [85.7, 7255.0], [85.8, 7255.0], [85.9, 7255.0], [86.0, 7281.0], [86.1, 7281.0], [86.2, 7281.0], [86.3, 7281.0], [86.4, 7281.0], [86.5, 7403.0], [86.6, 7403.0], [86.7, 7403.0], [86.8, 7403.0], [86.9, 7403.0], [87.0, 7419.0], [87.1, 7419.0], [87.2, 7419.0], [87.3, 7419.0], [87.4, 7419.0], [87.5, 7507.0], [87.6, 7507.0], [87.7, 7507.0], [87.8, 7507.0], [87.9, 7507.0], [88.0, 7514.0], [88.1, 7514.0], [88.2, 7514.0], [88.3, 7514.0], [88.4, 7514.0], [88.5, 7719.0], [88.6, 7719.0], [88.7, 7719.0], [88.8, 7719.0], [88.9, 7719.0], [89.0, 8147.0], [89.1, 8147.0], [89.2, 8147.0], [89.3, 8147.0], [89.4, 8147.0], [89.5, 8203.0], [89.6, 8203.0], [89.7, 8203.0], [89.8, 8203.0], [89.9, 8203.0], [90.0, 8223.0], [90.1, 8223.0], [90.2, 8223.0], [90.3, 8223.0], [90.4, 8223.0], [90.5, 8283.0], [90.6, 8283.0], [90.7, 8283.0], [90.8, 8283.0], [90.9, 8283.0], [91.0, 8394.0], [91.1, 8394.0], [91.2, 8394.0], [91.3, 8394.0], [91.4, 8394.0], [91.5, 8534.0], [91.6, 8534.0], [91.7, 8534.0], [91.8, 8534.0], [91.9, 8534.0], [92.0, 8746.0], [92.1, 8746.0], [92.2, 8746.0], [92.3, 8746.0], [92.4, 8746.0], [92.5, 8815.0], [92.6, 8815.0], [92.7, 8815.0], [92.8, 8815.0], [92.9, 8815.0], [93.0, 8839.0], [93.1, 8839.0], [93.2, 8839.0], [93.3, 8839.0], [93.4, 8839.0], [93.5, 8861.0], [93.6, 8861.0], [93.7, 8861.0], [93.8, 8861.0], [93.9, 8861.0], [94.0, 8871.0], [94.1, 8871.0], [94.2, 8871.0], [94.3, 8871.0], [94.4, 8871.0], [94.5, 9028.0], [94.6, 9028.0], [94.7, 9028.0], [94.8, 9028.0], [94.9, 9028.0], [95.0, 9048.0], [95.1, 9048.0], [95.2, 9048.0], [95.3, 9048.0], [95.4, 9048.0], [95.5, 9100.0], [95.6, 9100.0], [95.7, 9100.0], [95.8, 9100.0], [95.9, 9100.0], [96.0, 10226.0], [96.1, 10226.0], [96.2, 10226.0], [96.3, 10226.0], [96.4, 10226.0], [96.5, 10728.0], [96.6, 10728.0], [96.7, 10728.0], [96.8, 10728.0], [96.9, 10728.0], [97.0, 11695.0], [97.1, 11695.0], [97.2, 11695.0], [97.3, 11695.0], [97.4, 11695.0], [97.5, 12392.0], [97.6, 12392.0], [97.7, 12392.0], [97.8, 12392.0], [97.9, 12392.0], [98.0, 13781.0], [98.1, 13781.0], [98.2, 13781.0], [98.3, 13781.0], [98.4, 13781.0], [98.5, 20853.0], [98.6, 20853.0], [98.7, 20853.0], [98.8, 20853.0], [98.9, 20853.0], [99.0, 20923.0], [99.1, 20923.0], [99.2, 20923.0], [99.3, 20923.0], [99.4, 20923.0], [99.5, 21232.0], [99.6, 21232.0], [99.7, 21232.0], [99.8, 21232.0], [99.9, 21232.0]], "isOverall": false, "label": "Homepage-1", "isController": false}, {"data": [[0.0, 399.0], [0.1, 399.0], [0.2, 399.0], [0.3, 399.0], [0.4, 399.0], [0.5, 407.0], [0.6, 407.0], [0.7, 407.0], [0.8, 407.0], [0.9, 407.0], [1.0, 413.0], [1.1, 413.0], [1.2, 413.0], [1.3, 413.0], [1.4, 413.0], [1.5, 414.0], [1.6, 414.0], [1.7, 414.0], [1.8, 414.0], [1.9, 414.0], [2.0, 415.0], [2.1, 415.0], [2.2, 415.0], [2.3, 415.0], [2.4, 415.0], [2.5, 416.0], [2.6, 416.0], [2.7, 416.0], [2.8, 416.0], [2.9, 416.0], [3.0, 417.0], [3.1, 417.0], [3.2, 417.0], [3.3, 417.0], [3.4, 417.0], [3.5, 420.0], [3.6, 420.0], [3.7, 420.0], [3.8, 420.0], [3.9, 420.0], [4.0, 421.0], [4.1, 421.0], [4.2, 421.0], [4.3, 421.0], [4.4, 421.0], [4.5, 423.0], [4.6, 423.0], [4.7, 423.0], [4.8, 423.0], [4.9, 423.0], [5.0, 424.0], [5.1, 424.0], [5.2, 424.0], [5.3, 424.0], [5.4, 424.0], [5.5, 432.0], [5.6, 432.0], [5.7, 432.0], [5.8, 432.0], [5.9, 432.0], [6.0, 432.0], [6.1, 432.0], [6.2, 432.0], [6.3, 432.0], [6.4, 432.0], [6.5, 434.0], [6.6, 434.0], [6.7, 434.0], [6.8, 434.0], [6.9, 434.0], [7.0, 439.0], [7.1, 439.0], [7.2, 439.0], [7.3, 439.0], [7.4, 439.0], [7.5, 442.0], [7.6, 442.0], [7.7, 442.0], [7.8, 442.0], [7.9, 442.0], [8.0, 442.0], [8.1, 442.0], [8.2, 442.0], [8.3, 442.0], [8.4, 442.0], [8.5, 445.0], [8.6, 445.0], [8.7, 445.0], [8.8, 445.0], [8.9, 445.0], [9.0, 447.0], [9.1, 447.0], [9.2, 447.0], [9.3, 447.0], [9.4, 447.0], [9.5, 449.0], [9.6, 449.0], [9.7, 449.0], [9.8, 449.0], [9.9, 449.0], [10.0, 449.0], [10.1, 449.0], [10.2, 449.0], [10.3, 449.0], [10.4, 449.0], [10.5, 450.0], [10.6, 450.0], [10.7, 450.0], [10.8, 450.0], [10.9, 450.0], [11.0, 450.0], [11.1, 450.0], [11.2, 450.0], [11.3, 450.0], [11.4, 450.0], [11.5, 450.0], [11.6, 450.0], [11.7, 450.0], [11.8, 450.0], [11.9, 450.0], [12.0, 450.0], [12.1, 450.0], [12.2, 450.0], [12.3, 450.0], [12.4, 450.0], [12.5, 451.0], [12.6, 451.0], [12.7, 451.0], [12.8, 451.0], [12.9, 451.0], [13.0, 451.0], [13.1, 451.0], [13.2, 451.0], [13.3, 451.0], [13.4, 451.0], [13.5, 452.0], [13.6, 452.0], [13.7, 452.0], [13.8, 452.0], [13.9, 452.0], [14.0, 452.0], [14.1, 452.0], [14.2, 452.0], [14.3, 452.0], [14.4, 452.0], [14.5, 452.0], [14.6, 452.0], [14.7, 452.0], [14.8, 452.0], [14.9, 452.0], [15.0, 453.0], [15.1, 453.0], [15.2, 453.0], [15.3, 453.0], [15.4, 453.0], [15.5, 453.0], [15.6, 453.0], [15.7, 453.0], [15.8, 453.0], [15.9, 453.0], [16.0, 453.0], [16.1, 453.0], [16.2, 453.0], [16.3, 453.0], [16.4, 453.0], [16.5, 454.0], [16.6, 454.0], [16.7, 454.0], [16.8, 454.0], [16.9, 454.0], [17.0, 455.0], [17.1, 455.0], [17.2, 455.0], [17.3, 455.0], [17.4, 455.0], [17.5, 455.0], [17.6, 455.0], [17.7, 455.0], [17.8, 455.0], [17.9, 455.0], [18.0, 456.0], [18.1, 456.0], [18.2, 456.0], [18.3, 456.0], [18.4, 456.0], [18.5, 456.0], [18.6, 456.0], [18.7, 456.0], [18.8, 456.0], [18.9, 456.0], [19.0, 456.0], [19.1, 456.0], [19.2, 456.0], [19.3, 456.0], [19.4, 456.0], [19.5, 456.0], [19.6, 456.0], [19.7, 456.0], [19.8, 456.0], [19.9, 456.0], [20.0, 456.0], [20.1, 456.0], [20.2, 456.0], [20.3, 456.0], [20.4, 456.0], [20.5, 457.0], [20.6, 457.0], [20.7, 457.0], [20.8, 457.0], [20.9, 457.0], [21.0, 457.0], [21.1, 457.0], [21.2, 457.0], [21.3, 457.0], [21.4, 457.0], [21.5, 458.0], [21.6, 458.0], [21.7, 458.0], [21.8, 458.0], [21.9, 458.0], [22.0, 460.0], [22.1, 460.0], [22.2, 460.0], [22.3, 460.0], [22.4, 460.0], [22.5, 460.0], [22.6, 460.0], [22.7, 460.0], [22.8, 460.0], [22.9, 460.0], [23.0, 460.0], [23.1, 460.0], [23.2, 460.0], [23.3, 460.0], [23.4, 460.0], [23.5, 460.0], [23.6, 460.0], [23.7, 460.0], [23.8, 460.0], [23.9, 460.0], [24.0, 461.0], [24.1, 461.0], [24.2, 461.0], [24.3, 461.0], [24.4, 461.0], [24.5, 461.0], [24.6, 461.0], [24.7, 461.0], [24.8, 461.0], [24.9, 461.0], [25.0, 462.0], [25.1, 462.0], [25.2, 462.0], [25.3, 462.0], [25.4, 462.0], [25.5, 462.0], [25.6, 462.0], [25.7, 462.0], [25.8, 462.0], [25.9, 462.0], [26.0, 462.0], [26.1, 462.0], [26.2, 462.0], [26.3, 462.0], [26.4, 462.0], [26.5, 462.0], [26.6, 462.0], [26.7, 462.0], [26.8, 462.0], [26.9, 462.0], [27.0, 462.0], [27.1, 462.0], [27.2, 462.0], [27.3, 462.0], [27.4, 462.0], [27.5, 463.0], [27.6, 463.0], [27.7, 463.0], [27.8, 463.0], [27.9, 463.0], [28.0, 463.0], [28.1, 463.0], [28.2, 463.0], [28.3, 463.0], [28.4, 463.0], [28.5, 463.0], [28.6, 463.0], [28.7, 463.0], [28.8, 463.0], [28.9, 463.0], [29.0, 463.0], [29.1, 463.0], [29.2, 463.0], [29.3, 463.0], [29.4, 463.0], [29.5, 463.0], [29.6, 463.0], [29.7, 463.0], [29.8, 463.0], [29.9, 463.0], [30.0, 464.0], [30.1, 464.0], [30.2, 464.0], [30.3, 464.0], [30.4, 464.0], [30.5, 464.0], [30.6, 464.0], [30.7, 464.0], [30.8, 464.0], [30.9, 464.0], [31.0, 464.0], [31.1, 464.0], [31.2, 464.0], [31.3, 464.0], [31.4, 464.0], [31.5, 464.0], [31.6, 464.0], [31.7, 464.0], [31.8, 464.0], [31.9, 464.0], [32.0, 465.0], [32.1, 465.0], [32.2, 465.0], [32.3, 465.0], [32.4, 465.0], [32.5, 465.0], [32.6, 465.0], [32.7, 465.0], [32.8, 465.0], [32.9, 465.0], [33.0, 465.0], [33.1, 465.0], [33.2, 465.0], [33.3, 465.0], [33.4, 465.0], [33.5, 465.0], [33.6, 465.0], [33.7, 465.0], [33.8, 465.0], [33.9, 465.0], [34.0, 465.0], [34.1, 465.0], [34.2, 465.0], [34.3, 465.0], [34.4, 465.0], [34.5, 465.0], [34.6, 465.0], [34.7, 465.0], [34.8, 465.0], [34.9, 465.0], [35.0, 465.0], [35.1, 465.0], [35.2, 465.0], [35.3, 465.0], [35.4, 465.0], [35.5, 465.0], [35.6, 465.0], [35.7, 465.0], [35.8, 465.0], [35.9, 465.0], [36.0, 466.0], [36.1, 466.0], [36.2, 466.0], [36.3, 466.0], [36.4, 466.0], [36.5, 467.0], [36.6, 467.0], [36.7, 467.0], [36.8, 467.0], [36.9, 467.0], [37.0, 467.0], [37.1, 467.0], [37.2, 467.0], [37.3, 467.0], [37.4, 467.0], [37.5, 467.0], [37.6, 467.0], [37.7, 467.0], [37.8, 467.0], [37.9, 467.0], [38.0, 467.0], [38.1, 467.0], [38.2, 467.0], [38.3, 467.0], [38.4, 467.0], [38.5, 467.0], [38.6, 467.0], [38.7, 467.0], [38.8, 467.0], [38.9, 467.0], [39.0, 467.0], [39.1, 467.0], [39.2, 467.0], [39.3, 467.0], [39.4, 467.0], [39.5, 467.0], [39.6, 467.0], [39.7, 467.0], [39.8, 467.0], [39.9, 467.0], [40.0, 468.0], [40.1, 468.0], [40.2, 468.0], [40.3, 468.0], [40.4, 468.0], [40.5, 468.0], [40.6, 468.0], [40.7, 468.0], [40.8, 468.0], [40.9, 468.0], [41.0, 468.0], [41.1, 468.0], [41.2, 468.0], [41.3, 468.0], [41.4, 468.0], [41.5, 468.0], [41.6, 468.0], [41.7, 468.0], [41.8, 468.0], [41.9, 468.0], [42.0, 469.0], [42.1, 469.0], [42.2, 469.0], [42.3, 469.0], [42.4, 469.0], [42.5, 469.0], [42.6, 469.0], [42.7, 469.0], [42.8, 469.0], [42.9, 469.0], [43.0, 469.0], [43.1, 469.0], [43.2, 469.0], [43.3, 469.0], [43.4, 469.0], [43.5, 469.0], [43.6, 469.0], [43.7, 469.0], [43.8, 469.0], [43.9, 469.0], [44.0, 470.0], [44.1, 470.0], [44.2, 470.0], [44.3, 470.0], [44.4, 470.0], [44.5, 470.0], [44.6, 470.0], [44.7, 470.0], [44.8, 470.0], [44.9, 470.0], [45.0, 470.0], [45.1, 470.0], [45.2, 470.0], [45.3, 470.0], [45.4, 470.0], [45.5, 471.0], [45.6, 471.0], [45.7, 471.0], [45.8, 471.0], [45.9, 471.0], [46.0, 471.0], [46.1, 471.0], [46.2, 471.0], [46.3, 471.0], [46.4, 471.0], [46.5, 471.0], [46.6, 471.0], [46.7, 471.0], [46.8, 471.0], [46.9, 471.0], [47.0, 471.0], [47.1, 471.0], [47.2, 471.0], [47.3, 471.0], [47.4, 471.0], [47.5, 472.0], [47.6, 472.0], [47.7, 472.0], [47.8, 472.0], [47.9, 472.0], [48.0, 472.0], [48.1, 472.0], [48.2, 472.0], [48.3, 472.0], [48.4, 472.0], [48.5, 472.0], [48.6, 472.0], [48.7, 472.0], [48.8, 472.0], [48.9, 472.0], [49.0, 473.0], [49.1, 473.0], [49.2, 473.0], [49.3, 473.0], [49.4, 473.0], [49.5, 474.0], [49.6, 474.0], [49.7, 474.0], [49.8, 474.0], [49.9, 474.0], [50.0, 474.0], [50.1, 474.0], [50.2, 474.0], [50.3, 474.0], [50.4, 474.0], [50.5, 475.0], [50.6, 475.0], [50.7, 475.0], [50.8, 475.0], [50.9, 475.0], [51.0, 475.0], [51.1, 475.0], [51.2, 475.0], [51.3, 475.0], [51.4, 475.0], [51.5, 476.0], [51.6, 476.0], [51.7, 476.0], [51.8, 476.0], [51.9, 476.0], [52.0, 476.0], [52.1, 476.0], [52.2, 476.0], [52.3, 476.0], [52.4, 476.0], [52.5, 476.0], [52.6, 476.0], [52.7, 476.0], [52.8, 476.0], [52.9, 476.0], [53.0, 476.0], [53.1, 476.0], [53.2, 476.0], [53.3, 476.0], [53.4, 476.0], [53.5, 476.0], [53.6, 476.0], [53.7, 476.0], [53.8, 476.0], [53.9, 476.0], [54.0, 478.0], [54.1, 478.0], [54.2, 478.0], [54.3, 478.0], [54.4, 478.0], [54.5, 479.0], [54.6, 479.0], [54.7, 479.0], [54.8, 479.0], [54.9, 479.0], [55.0, 479.0], [55.1, 479.0], [55.2, 479.0], [55.3, 479.0], [55.4, 479.0], [55.5, 480.0], [55.6, 480.0], [55.7, 480.0], [55.8, 480.0], [55.9, 480.0], [56.0, 481.0], [56.1, 481.0], [56.2, 481.0], [56.3, 481.0], [56.4, 481.0], [56.5, 482.0], [56.6, 482.0], [56.7, 482.0], [56.8, 482.0], [56.9, 482.0], [57.0, 484.0], [57.1, 484.0], [57.2, 484.0], [57.3, 484.0], [57.4, 484.0], [57.5, 487.0], [57.6, 487.0], [57.7, 487.0], [57.8, 487.0], [57.9, 487.0], [58.0, 488.0], [58.1, 488.0], [58.2, 488.0], [58.3, 488.0], [58.4, 488.0], [58.5, 489.0], [58.6, 489.0], [58.7, 489.0], [58.8, 489.0], [58.9, 489.0], [59.0, 491.0], [59.1, 491.0], [59.2, 491.0], [59.3, 491.0], [59.4, 491.0], [59.5, 495.0], [59.6, 495.0], [59.7, 495.0], [59.8, 495.0], [59.9, 495.0], [60.0, 495.0], [60.1, 495.0], [60.2, 495.0], [60.3, 495.0], [60.4, 495.0], [60.5, 497.0], [60.6, 497.0], [60.7, 497.0], [60.8, 497.0], [60.9, 497.0], [61.0, 499.0], [61.1, 499.0], [61.2, 499.0], [61.3, 499.0], [61.4, 499.0], [61.5, 502.0], [61.6, 502.0], [61.7, 502.0], [61.8, 502.0], [61.9, 502.0], [62.0, 503.0], [62.1, 503.0], [62.2, 503.0], [62.3, 503.0], [62.4, 503.0], [62.5, 510.0], [62.6, 510.0], [62.7, 510.0], [62.8, 510.0], [62.9, 510.0], [63.0, 528.0], [63.1, 528.0], [63.2, 528.0], [63.3, 528.0], [63.4, 528.0], [63.5, 531.0], [63.6, 531.0], [63.7, 531.0], [63.8, 531.0], [63.9, 531.0], [64.0, 532.0], [64.1, 532.0], [64.2, 532.0], [64.3, 532.0], [64.4, 532.0], [64.5, 538.0], [64.6, 538.0], [64.7, 538.0], [64.8, 538.0], [64.9, 538.0], [65.0, 539.0], [65.1, 539.0], [65.2, 539.0], [65.3, 539.0], [65.4, 539.0], [65.5, 542.0], [65.6, 542.0], [65.7, 542.0], [65.8, 542.0], [65.9, 542.0], [66.0, 546.0], [66.1, 546.0], [66.2, 546.0], [66.3, 546.0], [66.4, 546.0], [66.5, 550.0], [66.6, 550.0], [66.7, 550.0], [66.8, 550.0], [66.9, 550.0], [67.0, 550.0], [67.1, 550.0], [67.2, 550.0], [67.3, 550.0], [67.4, 550.0], [67.5, 559.0], [67.6, 559.0], [67.7, 559.0], [67.8, 559.0], [67.9, 559.0], [68.0, 565.0], [68.1, 565.0], [68.2, 565.0], [68.3, 565.0], [68.4, 565.0], [68.5, 617.0], [68.6, 617.0], [68.7, 617.0], [68.8, 617.0], [68.9, 617.0], [69.0, 649.0], [69.1, 649.0], [69.2, 649.0], [69.3, 649.0], [69.4, 649.0], [69.5, 664.0], [69.6, 664.0], [69.7, 664.0], [69.8, 664.0], [69.9, 664.0], [70.0, 678.0], [70.1, 678.0], [70.2, 678.0], [70.3, 678.0], [70.4, 678.0], [70.5, 680.0], [70.6, 680.0], [70.7, 680.0], [70.8, 680.0], [70.9, 680.0], [71.0, 683.0], [71.1, 683.0], [71.2, 683.0], [71.3, 683.0], [71.4, 683.0], [71.5, 686.0], [71.6, 686.0], [71.7, 686.0], [71.8, 686.0], [71.9, 686.0], [72.0, 744.0], [72.1, 744.0], [72.2, 744.0], [72.3, 744.0], [72.4, 744.0], [72.5, 771.0], [72.6, 771.0], [72.7, 771.0], [72.8, 771.0], [72.9, 771.0], [73.0, 780.0], [73.1, 780.0], [73.2, 780.0], [73.3, 780.0], [73.4, 780.0], [73.5, 781.0], [73.6, 781.0], [73.7, 781.0], [73.8, 781.0], [73.9, 781.0], [74.0, 781.0], [74.1, 781.0], [74.2, 781.0], [74.3, 781.0], [74.4, 781.0], [74.5, 781.0], [74.6, 781.0], [74.7, 781.0], [74.8, 781.0], [74.9, 781.0], [75.0, 781.0], [75.1, 781.0], [75.2, 781.0], [75.3, 781.0], [75.4, 781.0], [75.5, 784.0], [75.6, 784.0], [75.7, 784.0], [75.8, 784.0], [75.9, 784.0], [76.0, 790.0], [76.1, 790.0], [76.2, 790.0], [76.3, 790.0], [76.4, 790.0], [76.5, 802.0], [76.6, 802.0], [76.7, 802.0], [76.8, 802.0], [76.9, 802.0], [77.0, 805.0], [77.1, 805.0], [77.2, 805.0], [77.3, 805.0], [77.4, 805.0], [77.5, 807.0], [77.6, 807.0], [77.7, 807.0], [77.8, 807.0], [77.9, 807.0], [78.0, 812.0], [78.1, 812.0], [78.2, 812.0], [78.3, 812.0], [78.4, 812.0], [78.5, 814.0], [78.6, 814.0], [78.7, 814.0], [78.8, 814.0], [78.9, 814.0], [79.0, 816.0], [79.1, 816.0], [79.2, 816.0], [79.3, 816.0], [79.4, 816.0], [79.5, 822.0], [79.6, 822.0], [79.7, 822.0], [79.8, 822.0], [79.9, 822.0], [80.0, 833.0], [80.1, 833.0], [80.2, 833.0], [80.3, 833.0], [80.4, 833.0], [80.5, 865.0], [80.6, 865.0], [80.7, 865.0], [80.8, 865.0], [80.9, 865.0], [81.0, 866.0], [81.1, 866.0], [81.2, 866.0], [81.3, 866.0], [81.4, 866.0], [81.5, 882.0], [81.6, 882.0], [81.7, 882.0], [81.8, 882.0], [81.9, 882.0], [82.0, 1024.0], [82.1, 1024.0], [82.2, 1024.0], [82.3, 1024.0], [82.4, 1024.0], [82.5, 1082.0], [82.6, 1082.0], [82.7, 1082.0], [82.8, 1082.0], [82.9, 1082.0], [83.0, 1112.0], [83.1, 1112.0], [83.2, 1112.0], [83.3, 1112.0], [83.4, 1112.0], [83.5, 1198.0], [83.6, 1198.0], [83.7, 1198.0], [83.8, 1198.0], [83.9, 1198.0], [84.0, 1297.0], [84.1, 1297.0], [84.2, 1297.0], [84.3, 1297.0], [84.4, 1297.0], [84.5, 1297.0], [84.6, 1297.0], [84.7, 1297.0], [84.8, 1297.0], [84.9, 1297.0], [85.0, 1441.0], [85.1, 1441.0], [85.2, 1441.0], [85.3, 1441.0], [85.4, 1441.0], [85.5, 1451.0], [85.6, 1451.0], [85.7, 1451.0], [85.8, 1451.0], [85.9, 1451.0], [86.0, 1461.0], [86.1, 1461.0], [86.2, 1461.0], [86.3, 1461.0], [86.4, 1461.0], [86.5, 1463.0], [86.6, 1463.0], [86.7, 1463.0], [86.8, 1463.0], [86.9, 1463.0], [87.0, 1463.0], [87.1, 1463.0], [87.2, 1463.0], [87.3, 1463.0], [87.4, 1463.0], [87.5, 1465.0], [87.6, 1465.0], [87.7, 1465.0], [87.8, 1465.0], [87.9, 1465.0], [88.0, 1465.0], [88.1, 1465.0], [88.2, 1465.0], [88.3, 1465.0], [88.4, 1465.0], [88.5, 1472.0], [88.6, 1472.0], [88.7, 1472.0], [88.8, 1472.0], [88.9, 1472.0], [89.0, 1473.0], [89.1, 1473.0], [89.2, 1473.0], [89.3, 1473.0], [89.4, 1473.0], [89.5, 1475.0], [89.6, 1475.0], [89.7, 1475.0], [89.8, 1475.0], [89.9, 1475.0], [90.0, 1477.0], [90.1, 1477.0], [90.2, 1477.0], [90.3, 1477.0], [90.4, 1477.0], [90.5, 1477.0], [90.6, 1477.0], [90.7, 1477.0], [90.8, 1477.0], [90.9, 1477.0], [91.0, 1478.0], [91.1, 1478.0], [91.2, 1478.0], [91.3, 1478.0], [91.4, 1478.0], [91.5, 1478.0], [91.6, 1478.0], [91.7, 1478.0], [91.8, 1478.0], [91.9, 1478.0], [92.0, 1478.0], [92.1, 1478.0], [92.2, 1478.0], [92.3, 1478.0], [92.4, 1478.0], [92.5, 1479.0], [92.6, 1479.0], [92.7, 1479.0], [92.8, 1479.0], [92.9, 1479.0], [93.0, 1482.0], [93.1, 1482.0], [93.2, 1482.0], [93.3, 1482.0], [93.4, 1482.0], [93.5, 1486.0], [93.6, 1486.0], [93.7, 1486.0], [93.8, 1486.0], [93.9, 1486.0], [94.0, 1488.0], [94.1, 1488.0], [94.2, 1488.0], [94.3, 1488.0], [94.4, 1488.0], [94.5, 1489.0], [94.6, 1489.0], [94.7, 1489.0], [94.8, 1489.0], [94.9, 1489.0], [95.0, 1493.0], [95.1, 1493.0], [95.2, 1493.0], [95.3, 1493.0], [95.4, 1493.0], [95.5, 1496.0], [95.6, 1496.0], [95.7, 1496.0], [95.8, 1496.0], [95.9, 1496.0], [96.0, 1497.0], [96.1, 1497.0], [96.2, 1497.0], [96.3, 1497.0], [96.4, 1497.0], [96.5, 1502.0], [96.6, 1502.0], [96.7, 1502.0], [96.8, 1502.0], [96.9, 1502.0], [97.0, 1533.0], [97.1, 1533.0], [97.2, 1533.0], [97.3, 1533.0], [97.4, 1533.0], [97.5, 1778.0], [97.6, 1778.0], [97.7, 1778.0], [97.8, 1778.0], [97.9, 1778.0], [98.0, 1796.0], [98.1, 1796.0], [98.2, 1796.0], [98.3, 1796.0], [98.4, 1796.0], [98.5, 1823.0], [98.6, 1823.0], [98.7, 1823.0], [98.8, 1823.0], [98.9, 1823.0], [99.0, 2489.0], [99.1, 2489.0], [99.2, 2489.0], [99.3, 2489.0], [99.4, 2489.0], [99.5, 2571.0], [99.6, 2571.0], [99.7, 2571.0], [99.8, 2571.0], [99.9, 2571.0]], "isOverall": false, "label": "Homepage-0", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 122.0, "series": [{"data": [[1100.0, 2.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 6.0], [1500.0, 3.0], [1600.0, 7.0], [1700.0, 7.0], [1800.0, 4.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 7.0], [2200.0, 3.0], [2300.0, 2.0], [2400.0, 4.0], [2500.0, 4.0], [2600.0, 2.0], [2700.0, 6.0], [2900.0, 3.0], [3000.0, 7.0], [3300.0, 2.0], [3200.0, 4.0], [3400.0, 1.0], [3500.0, 2.0], [3700.0, 5.0], [3600.0, 2.0], [3900.0, 4.0], [4000.0, 1.0], [4200.0, 2.0], [4300.0, 1.0], [4100.0, 1.0], [4500.0, 4.0], [4400.0, 3.0], [4700.0, 3.0], [5100.0, 3.0], [4900.0, 3.0], [5200.0, 2.0], [5300.0, 4.0], [5500.0, 3.0], [5400.0, 3.0], [5600.0, 1.0], [5800.0, 1.0], [6000.0, 2.0], [6100.0, 3.0], [5900.0, 1.0], [6300.0, 2.0], [6400.0, 1.0], [6600.0, 1.0], [6800.0, 4.0], [6700.0, 2.0], [7100.0, 1.0], [7400.0, 3.0], [7200.0, 2.0], [7300.0, 5.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 5.0], [7900.0, 3.0], [7800.0, 2.0], [8000.0, 1.0], [8300.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8600.0, 1.0], [8200.0, 1.0], [9200.0, 3.0], [8800.0, 1.0], [9000.0, 1.0], [8900.0, 1.0], [9600.0, 1.0], [9500.0, 1.0], [9400.0, 1.0], [9300.0, 2.0], [10500.0, 1.0], [11100.0, 1.0], [11600.0, 1.0], [12100.0, 1.0], [12800.0, 1.0], [14400.0, 1.0], [21300.0, 2.0], [21700.0, 1.0]], "isOverall": false, "label": "Homepage", "isController": false}, {"data": [[600.0, 1.0], [700.0, 6.0], [800.0, 2.0], [900.0, 9.0], [1000.0, 5.0], [1100.0, 4.0], [1200.0, 10.0], [1300.0, 7.0], [1400.0, 2.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 7.0], [1800.0, 2.0], [1900.0, 2.0], [2000.0, 4.0], [2100.0, 3.0], [2200.0, 4.0], [2500.0, 8.0], [2600.0, 3.0], [2700.0, 2.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 2.0], [3300.0, 4.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 2.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 1.0], [4000.0, 5.0], [4200.0, 2.0], [4100.0, 1.0], [4300.0, 1.0], [4600.0, 3.0], [4400.0, 3.0], [4500.0, 1.0], [4800.0, 5.0], [5000.0, 3.0], [5100.0, 1.0], [4900.0, 4.0], [5500.0, 1.0], [5600.0, 4.0], [5400.0, 1.0], [5800.0, 3.0], [5700.0, 1.0], [5900.0, 5.0], [6000.0, 2.0], [6100.0, 1.0], [6300.0, 3.0], [6500.0, 2.0], [6900.0, 4.0], [6700.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 2.0], [7200.0, 4.0], [7400.0, 2.0], [7500.0, 2.0], [7700.0, 1.0], [8100.0, 1.0], [8200.0, 3.0], [8700.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [9100.0, 1.0], [8800.0, 4.0], [9000.0, 2.0], [10200.0, 1.0], [10700.0, 1.0], [11600.0, 1.0], [12300.0, 1.0], [13700.0, 1.0], [21200.0, 1.0], [20900.0, 1.0], [20800.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "Homepage-1", "isController": false}, {"data": [[600.0, 7.0], [2400.0, 1.0], [2500.0, 1.0], [700.0, 9.0], [800.0, 11.0], [1000.0, 2.0], [1100.0, 2.0], [300.0, 1.0], [1200.0, 2.0], [1400.0, 23.0], [1500.0, 2.0], [400.0, 122.0], [1700.0, 2.0], [1800.0, 1.0], [500.0, 14.0]], "isOverall": false, "label": "Homepage-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 123.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 347.0, "series": [{"data": [[0.0, 123.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 130.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 347.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 56.20647773279353, "minX": 1.6735461E12, "maxY": 67.44759206798867, "series": [{"data": [[1.67354616E12, 56.20647773279353], [1.6735461E12, 67.44759206798867]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67354616E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 417.0, "minX": 1.0, "maxY": 21775.0, "series": [{"data": [[2.0, 21341.0], [3.0, 21775.0], [4.0, 14445.0], [5.0, 8928.0], [6.0, 7169.0], [7.0, 6072.0], [8.0, 7756.0], [9.0, 6846.0], [10.0, 9326.0], [11.0, 11699.0], [12.0, 8215.0], [13.0, 7871.0], [14.0, 7628.0], [15.0, 5629.0], [16.0, 9011.0], [18.0, 6142.0], [19.0, 7642.0], [20.0, 4783.0], [21.0, 6710.0], [22.0, 5393.0], [23.0, 9297.0], [24.0, 6391.0], [25.0, 7857.0], [26.0, 8680.0], [27.0, 9337.0], [28.0, 4474.0], [29.0, 5937.0], [30.0, 4107.0], [31.0, 5289.0], [33.0, 6173.0], [32.0, 7332.0], [35.0, 4482.0], [34.0, 9495.0], [37.0, 5355.0], [36.0, 4938.0], [39.0, 3692.0], [38.0, 8747.0], [41.0, 2610.0], [40.0, 4234.5], [42.0, 4152.666666666666], [43.0, 3433.0], [45.0, 5742.5], [44.0, 7975.0], [46.0, 3960.0], [47.0, 3366.5], [48.0, 3269.5], [49.0, 6163.0], [51.0, 2003.5], [50.0, 3592.0], [53.0, 7504.0], [52.0, 5079.5], [55.0, 3842.0], [54.0, 2997.0], [56.0, 2206.4], [57.0, 3325.666666666667], [59.0, 2684.0], [58.0, 10542.0], [60.0, 4050.666666666667], [61.0, 4606.0], [62.0, 5392.0], [63.0, 5846.0], [65.0, 7261.5], [66.0, 5615.0], [67.0, 2890.5], [64.0, 9228.0], [68.0, 4364.2], [70.0, 3786.5], [71.0, 4579.0], [69.0, 11179.0], [75.0, 5277.0], [74.0, 5313.0], [73.0, 2893.0], [78.0, 2301.0], [79.0, 4373.666666666667], [77.0, 6017.0], [76.0, 3770.0], [83.0, 3154.25], [82.0, 2651.0], [81.0, 4903.0], [80.0, 7710.0], [85.0, 3208.5], [84.0, 3228.8333333333335], [87.0, 4579.0], [86.0, 3913.0], [91.0, 1766.0], [90.0, 7292.0], [89.0, 7975.0], [88.0, 7544.0], [92.0, 5578.0], [95.0, 9503.0], [94.0, 6808.0], [93.0, 2041.0], [99.0, 4691.0], [98.0, 4103.5], [97.0, 7593.5], [100.0, 1839.0], [102.0, 3922.1], [101.0, 4334.0], [103.0, 3331.3333333333335], [106.0, 1911.0], [107.0, 2155.0], [105.0, 6443.0], [104.0, 1490.0], [111.0, 3069.0], [110.0, 7716.0], [109.0, 1661.0], [108.0, 8085.0], [1.0, 21349.0]], "isOverall": false, "label": "Homepage", "isController": false}, {"data": [[62.82, 4933.735000000001]], "isOverall": false, "label": "Homepage-Aggregated", "isController": false}, {"data": [[2.0, 20923.0], [3.0, 21232.0], [4.0, 13781.0], [5.0, 8147.0], [6.0, 5691.0], [7.0, 4598.0], [8.0, 7281.0], [9.0, 6386.0], [10.0, 8861.0], [11.0, 10226.0], [12.0, 7719.0], [13.0, 7419.0], [14.0, 7156.0], [15.0, 4814.0], [16.0, 8534.0], [18.0, 5655.0], [19.0, 7176.0], [20.0, 4320.0], [21.0, 4913.0], [22.0, 4921.0], [23.0, 8839.0], [24.0, 5908.0], [25.0, 7403.0], [26.0, 8223.0], [27.0, 8871.0], [28.0, 4009.0], [29.0, 5471.0], [30.0, 3542.0], [31.0, 4812.0], [33.0, 5709.0], [32.0, 6034.0], [35.0, 4025.0], [34.0, 9028.0], [37.0, 4884.0], [36.0, 4485.0], [39.0, 2872.666666666667], [38.0, 8283.0], [41.0, 2146.4], [40.0, 3279.5], [42.0, 3719.0], [43.0, 2441.0], [45.0, 5300.5], [44.0, 7507.0], [46.0, 3492.5], [47.0, 2922.5], [48.0, 2810.5], [49.0, 5694.0], [51.0, 1465.5], [50.0, 3129.0], [53.0, 7017.5], [52.0, 4105.5], [55.0, 3287.0], [54.0, 2516.0], [56.0, 1705.9], [57.0, 2636.3333333333335], [59.0, 2000.0], [58.0, 9048.0], [60.0, 2816.0], [61.0, 3618.0], [62.0, 4779.5], [63.0, 5041.0], [65.0, 6807.0], [66.0, 4603.0], [67.0, 2430.5], [64.0, 8203.0], [68.0, 3493.6], [70.0, 2810.5], [71.0, 3798.0], [69.0, 10728.0], [75.0, 3815.0], [74.0, 4833.0], [73.0, 1755.5], [78.0, 1623.0], [79.0, 3815.0], [77.0, 5150.0], [76.0, 2936.0], [83.0, 2562.625], [82.0, 2112.6], [81.0, 4432.0], [80.0, 7241.0], [85.0, 2501.0], [84.0, 2375.833333333333], [87.0, 4089.0], [86.0, 2712.0], [91.0, 1207.0], [90.0, 6823.0], [89.0, 6509.0], [88.0, 7073.5], [92.0, 5002.5], [95.0, 8815.0], [94.0, 6352.0], [93.0, 1575.0], [99.0, 3188.0], [98.0, 3133.5], [97.0, 6570.5], [100.0, 1366.0], [102.0, 3071.9999999999995], [101.0, 3861.666666666667], [103.0, 2312.6666666666665], [106.0, 919.5], [107.0, 1342.0], [105.0, 5975.0], [104.0, 1008.0], [111.0, 2598.0], [110.0, 7255.0], [109.0, 1215.0], [108.0, 6587.0], [1.0, 20853.0]], "isOverall": false, "label": "Homepage-1", "isController": false}, {"data": [[62.82, 4236.179999999999]], "isOverall": false, "label": "Homepage-1-Aggregated", "isController": false}, {"data": [[2.0, 417.0], [3.0, 542.0], [4.0, 664.0], [5.0, 781.0], [6.0, 1477.0], [7.0, 1473.0], [8.0, 475.0], [9.0, 460.0], [10.0, 464.0], [11.0, 1472.0], [12.0, 495.0], [13.0, 451.0], [14.0, 472.0], [15.0, 814.0], [16.0, 476.0], [18.0, 486.5], [19.0, 465.0], [20.0, 463.0], [21.0, 1796.0], [22.0, 472.0], [23.0, 456.0], [24.0, 482.0], [25.0, 453.0], [26.0, 456.0], [27.0, 464.0], [28.0, 464.0], [29.0, 465.0], [30.0, 565.0], [31.0, 476.0], [33.0, 463.0], [32.0, 1297.0], [35.0, 457.0], [34.0, 467.0], [37.0, 470.0], [36.0, 452.0], [39.0, 818.6666666666667], [38.0, 462.0], [41.0, 461.6], [40.0, 954.0], [42.0, 433.0], [43.0, 991.0], [45.0, 441.5], [44.0, 468.0], [46.0, 466.0], [47.0, 443.0], [48.0, 458.5], [49.0, 468.0], [51.0, 537.0], [50.0, 464.0], [53.0, 485.5], [52.0, 973.5], [55.0, 554.0], [54.0, 479.75], [56.0, 499.5], [57.0, 688.8333333333334], [59.0, 683.0], [58.0, 1493.0], [60.0, 1233.3333333333333], [61.0, 986.5], [62.0, 611.5], [63.0, 805.0], [65.0, 454.5], [66.0, 1010.5], [67.0, 459.5], [64.0, 1024.0], [68.0, 869.4], [70.0, 975.0], [71.0, 781.0], [69.0, 450.0], [75.0, 1461.0], [74.0, 479.0], [73.0, 1138.0], [78.0, 678.0], [79.0, 557.3333333333334], [77.0, 866.0], [76.0, 833.0], [83.0, 590.3750000000001], [82.0, 537.4], [81.0, 471.0], [80.0, 467.0], [85.0, 706.75], [84.0, 851.8333333333334], [87.0, 489.0], [86.0, 1198.0], [91.0, 559.0], [90.0, 469.0], [89.0, 1465.0], [88.0, 469.5], [92.0, 575.0], [95.0, 686.0], [94.0, 455.0], [93.0, 463.0], [99.0, 1501.6666666666665], [98.0, 969.5], [97.0, 1019.5], [100.0, 471.5], [102.0, 849.3], [101.0, 471.6666666666667], [103.0, 1018.0], [106.0, 990.5], [107.0, 812.0], [105.0, 468.0], [104.0, 480.0], [111.0, 471.0], [110.0, 460.0], [109.0, 445.0], [108.0, 1497.0], [1.0, 495.0]], "isOverall": false, "label": "Homepage-0", "isController": false}, {"data": [[62.82, 696.6099999999999]], "isOverall": false, "label": "Homepage-0-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 111.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 726.95, "minX": 1.6735461E12, "maxY": 447513.31666666665, "series": [{"data": [[1.67354616E12, 447513.31666666665], [1.6735461E12, 352446.68333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67354616E12, 726.95], [1.6735461E12, 886.3833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67354616E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 684.7909604519771, "minX": 1.6735461E12, "maxY": 6730.446428571429, "series": [{"data": [[1.67354616E12, 6730.446428571429], [1.6735461E12, 2647.0113636363644]], "isOverall": false, "label": "Homepage", "isController": false}, {"data": [[1.67354616E12, 5980.660714285714], [1.6735461E12, 2015.931818181818]], "isOverall": false, "label": "Homepage-1", "isController": false}, {"data": [[1.67354616E12, 787.5652173913045], [1.6735461E12, 684.7909604519771]], "isOverall": false, "label": "Homepage-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67354616E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 629.8409090909096, "minX": 1.6735461E12, "maxY": 1492.9821428571431, "series": [{"data": [[1.67354616E12, 748.8571428571428], [1.6735461E12, 629.8409090909096]], "isOverall": false, "label": "Homepage", "isController": false}, {"data": [[1.67354616E12, 1492.9821428571431], [1.6735461E12, 737.102272727273]], "isOverall": false, "label": "Homepage-1", "isController": false}, {"data": [[1.67354616E12, 787.4782608695651], [1.6735461E12, 684.6666666666667]], "isOverall": false, "label": "Homepage-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67354616E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 194.8409090909091, "minX": 1.6735461E12, "maxY": 656.6875000000002, "series": [{"data": [[1.67354616E12, 276.33928571428567], [1.6735461E12, 194.8409090909091]], "isOverall": false, "label": "Homepage", "isController": false}, {"data": [[1.67354616E12, 656.6875000000002], [1.6735461E12, 390.57954545454544]], "isOverall": false, "label": "Homepage-1", "isController": false}, {"data": [[1.67354616E12, 311.99999999999994], [1.6735461E12, 231.18644067796606]], "isOverall": false, "label": "Homepage-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67354616E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 399.0, "minX": 1.6735461E12, "maxY": 21775.0, "series": [{"data": [[1.67354616E12, 21775.0], [1.6735461E12, 6339.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67354616E12, 457.0], [1.6735461E12, 399.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67354616E12, 9216.0], [1.6735461E12, 3249.600000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67354616E12, 21345.16], [1.6735461E12, 5526.459999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67354616E12, 5694.0], [1.6735461E12, 1217.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.67354616E12, 11697.4], [1.6735461E12, 4131.300000000002]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67354616E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 432.0, "minX": 2.0, "maxY": 21286.5, "series": [{"data": [[2.0, 6430.0], [34.0, 623.5], [35.0, 802.0], [38.0, 935.5], [43.0, 807.0], [46.0, 5961.0], [52.0, 1491.0], [58.0, 1736.5], [4.0, 11354.5], [76.0, 5482.5], [21.0, 432.0], [24.0, 4417.0], [6.0, 21286.5], [25.0, 5531.0], [26.0, 7350.0], [28.0, 1113.0], [30.0, 1189.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 76.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 432.0, "minX": 2.0, "maxY": 1904.0, "series": [{"data": [[2.0, 1829.0], [34.0, 458.5], [35.0, 467.0], [38.0, 495.0], [43.0, 491.0], [46.0, 759.0], [52.0, 486.5], [58.0, 501.5], [4.0, 1904.0], [76.0, 816.0], [21.0, 432.0], [24.0, 741.5], [6.0, 518.5], [25.0, 865.0], [26.0, 922.0], [28.0, 474.0], [30.0, 501.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 76.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.6735461E12, "maxY": 9.25, "series": [{"data": [[1.67354616E12, 0.75], [1.6735461E12, 9.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67354616E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.6735461E12, "maxY": 3.7333333333333334, "series": [{"data": [[1.67354616E12, 3.7333333333333334], [1.6735461E12, 2.933333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.67354616E12, 0.38333333333333336], [1.6735461E12, 2.95]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67354616E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.6735461E12, "maxY": 2.95, "series": [{"data": [[1.67354616E12, 1.8666666666666667], [1.6735461E12, 1.4666666666666666]], "isOverall": false, "label": "Homepage-1-success", "isController": false}, {"data": [[1.67354616E12, 0.38333333333333336], [1.6735461E12, 2.95]], "isOverall": false, "label": "Homepage-0-success", "isController": false}, {"data": [[1.67354616E12, 1.8666666666666667], [1.6735461E12, 1.4666666666666666]], "isOverall": false, "label": "Homepage-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67354616E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.116666666666666, "minX": 1.6735461E12, "maxY": 5.883333333333334, "series": [{"data": [[1.67354616E12, 4.116666666666666], [1.6735461E12, 5.883333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67354616E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

